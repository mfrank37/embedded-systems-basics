
timer-counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006df  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  0000096f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000299  00000000  00000000  00000f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001218  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e9  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000124  00000000  00000000  000016b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000017dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	3a c0       	rjmp	.+116    	; 0x7a <__vector_1>
   6:	00 00       	nop
   8:	4d c0       	rjmp	.+154    	; 0xa4 <__vector_2>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	56 c0       	rjmp	.+172    	; 0xda <__vector_11>
  2e:	00 00       	nop
  30:	72 c0       	rjmp	.+228    	; 0x116 <__vector_12>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	5f d0       	rcall	.+190    	; 0x134 <main>
  76:	87 c0       	rjmp	.+270    	; 0x186 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <__vector_1>:

#define PRESSED 0
#define SW1_STATUS (PIND & (1 << SW1))

// We should be interrupted when INT0 (SW1) make the specified event
ISR(INT0_vect) {
  7a:	1f 92       	push	r1
  7c:	0f 92       	push	r0
  7e:	0f b6       	in	r0, 0x3f	; 63
  80:	0f 92       	push	r0
  82:	11 24       	eor	r1, r1
  84:	8f 93       	push	r24
	// is the SW1 pressed?
	if(SW1_STATUS == PRESSED) {
  86:	4a 99       	sbic	0x09, 2	; 9
  88:	04 c0       	rjmp	.+8      	; 0x92 <__vector_1+0x18>
		PORTB &= ~(1 << LED2); // turn ON
  8a:	85 b1       	in	r24, 0x05	; 5
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	85 b9       	out	0x05, r24	; 5
  90:	03 c0       	rjmp	.+6      	; 0x98 <__vector_1+0x1e>
	} else {
		PORTB |= (1 << LED2); // turn OFF
  92:	85 b1       	in	r24, 0x05	; 5
  94:	82 60       	ori	r24, 0x02	; 2
  96:	85 b9       	out	0x05, r24	; 5
	}
}
  98:	8f 91       	pop	r24
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <__vector_2>:

// We should be interrupted when INT1 (SW2) make the specified event
ISR(INT1_vect) {
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
	PORTB &= ~(1<< LED3);
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	8b 7f       	andi	r24, 0xFB	; 251
  b6:	85 b9       	out	0x05, r24	; 5
	// turn off after one second (Overflows may happen but the time is still deterministic).
	OCR1B = TCNT1 + SECOND;
  b8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  bc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  c0:	8f 5e       	subi	r24, 0xEF	; 239
  c2:	95 48       	sbci	r25, 0x85	; 133
  c4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  c8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <__vector_11>:

// We should be interrupted when Timer is equal to OCR1A then toggle LED1 and LED4
ISR(TIMER1_COMPA_vect) {
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
	PORTB ^= (1 << LED1) | (1 << LED4);
  ec:	95 b1       	in	r25, 0x05	; 5
  ee:	89 e0       	ldi	r24, 0x09	; 9
  f0:	89 27       	eor	r24, r25
  f2:	85 b9       	out	0x05, r24	; 5
	OCR1A += SECOND; // we want to be interrupted one second later to execute this ISR again.
  f4:	e8 e8       	ldi	r30, 0x88	; 136
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	91 81       	ldd	r25, Z+1	; 0x01
  fc:	8f 5e       	subi	r24, 0xEF	; 239
  fe:	95 48       	sbci	r25, 0x85	; 133
 100:	91 83       	std	Z+1, r25	; 0x01
 102:	80 83       	st	Z, r24
}
 104:	ff 91       	pop	r31
 106:	ef 91       	pop	r30
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_12>:

// We should do this when Timer reaches(matches) OCR1B
ISR(TIMER1_COMPB_vect) {
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
		PORTB |= (1<< LED3);
 122:	85 b1       	in	r24, 0x05	; 5
 124:	84 60       	ori	r24, 0x04	; 4
 126:	85 b9       	out	0x05, r24	; 5
}
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <main>:

int main(void) {
	// Initialization //
	// setup LEDs and SWITCHES
	DDRD &= ~(1 << SW1) & ~(1 << SW2); // set switch pins as input
 134:	8a b1       	in	r24, 0x0a	; 10
 136:	83 7f       	andi	r24, 0xF3	; 243
 138:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED4); // set LED pins as output
 13a:	84 b1       	in	r24, 0x04	; 4
 13c:	8f 60       	ori	r24, 0x0F	; 15
 13e:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED4); // turn OFF LEDs
 140:	85 b1       	in	r24, 0x05	; 5
 142:	8f 60       	ori	r24, 0x0F	; 15
 144:	85 b9       	out	0x05, r24	; 5
	
	// setup timer(s)
	TCCR1B |= PRESCALER;
 146:	e1 e8       	ldi	r30, 0x81	; 129
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	84 60       	ori	r24, 0x04	; 4
 14e:	80 83       	st	Z, r24
	OCR1A = SECOND; // We need to know if one second has left since program started.
 150:	81 e1       	ldi	r24, 0x11	; 17
 152:	9a e7       	ldi	r25, 0x7A	; 122
 154:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 158:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	// enable Timer's Output Compare match B and Output Compare match A interrupts
	TIMSK1 |= (1 << OCIE1B) | (1 << OCIE1A);
 15c:	ef e6       	ldi	r30, 0x6F	; 111
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	86 60       	ori	r24, 0x06	; 6
 164:	80 83       	st	Z, r24
	
	// setup interrupt
	// EIMSK: Enable Interrupt Mask
	EIMSK |= (1 << INT0) | (1 << INT1);
 166:	8d b3       	in	r24, 0x1d	; 29
 168:	83 60       	ori	r24, 0x03	; 3
 16a:	8d bb       	out	0x1d, r24	; 29
	/**	EICRA: External Interrupt Control Register.
	 *	EICRA helps us to know if Pin is pressed or released (rising edge / falling edge or both)
	 */
	
	// for SW1 (INT1) => 1 1 => rising edge (LOW to HIGH)
	EICRA |= (1 << ISC11) | (1 << ISC10); 
 16c:	e9 e6       	ldi	r30, 0x69	; 105
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	8c 60       	ori	r24, 0x0C	; 12
 174:	80 83       	st	Z, r24
	
	// for SW2 (INT0) => 0 1 => both rising and falling edges
	EICRA &= ~(1 << ISC01);
 176:	80 81       	ld	r24, Z
 178:	8d 7f       	andi	r24, 0xFD	; 253
 17a:	80 83       	st	Z, r24
	EICRA |= (1 << ISC00);
 17c:	80 81       	ld	r24, Z
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	80 83       	st	Z, r24
	
	// Set Interrupt. To enable interrupts globally. (from SREG, setting D7=1 or I=1)
	sei();
 182:	78 94       	sei
 184:	ff cf       	rjmp	.-2      	; 0x184 <main+0x50>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
