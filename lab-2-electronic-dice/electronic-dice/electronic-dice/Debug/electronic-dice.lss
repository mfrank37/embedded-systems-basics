
electronic-dice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000294  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000294  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005a6  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000502  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c5  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000111c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038f  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000129  00000000  00000000  000014ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e4 e9       	ldi	r30, 0x94	; 148
  36:	f2 e0       	ldi	r31, 0x02	; 2
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_L__+0x1>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a4 36       	cpi	r26, 0x64	; 100
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>
  44:	2f d0       	rcall	.+94     	; 0xa4 <main>
  46:	24 c1       	rjmp	.+584    	; 0x290 <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <turn_on_leds_corresponding_to>:
		}
	}
}

void turn_on_leds_corresponding_to(int n) {
	switch (n) {
  4a:	83 30       	cpi	r24, 0x03	; 3
  4c:	91 05       	cpc	r25, r1
  4e:	b1 f0       	breq	.+44     	; 0x7c <turn_on_leds_corresponding_to+0x32>
  50:	34 f4       	brge	.+12     	; 0x5e <turn_on_leds_corresponding_to+0x14>
  52:	81 30       	cpi	r24, 0x01	; 1
  54:	91 05       	cpc	r25, r1
  56:	51 f0       	breq	.+20     	; 0x6c <turn_on_leds_corresponding_to+0x22>
  58:	02 97       	sbiw	r24, 0x02	; 2
  5a:	61 f0       	breq	.+24     	; 0x74 <turn_on_leds_corresponding_to+0x2a>
  5c:	08 95       	ret
  5e:	85 30       	cpi	r24, 0x05	; 5
  60:	91 05       	cpc	r25, r1
  62:	a1 f0       	breq	.+40     	; 0x8c <__DATA_REGION_LENGTH__+0xc>
  64:	7c f0       	brlt	.+30     	; 0x84 <__DATA_REGION_LENGTH__+0x4>
  66:	06 97       	sbiw	r24, 0x06	; 6
  68:	a9 f0       	breq	.+42     	; 0x94 <__DATA_REGION_LENGTH__+0x14>
  6a:	08 95       	ret
		case 1:
		PORTB &= ~(1<<PB0);
  6c:	88 b3       	in	r24, 0x18	; 24
  6e:	8e 7f       	andi	r24, 0xFE	; 254
  70:	88 bb       	out	0x18, r24	; 24
		break;
  72:	08 95       	ret
		case 2:
		PORTB &= ~(1<<PB1);
  74:	88 b3       	in	r24, 0x18	; 24
  76:	8d 7f       	andi	r24, 0xFD	; 253
  78:	88 bb       	out	0x18, r24	; 24
		break;
  7a:	08 95       	ret
		case 3:
		PORTB &= ~(1<<PB0) & ~(1<<PB1);
  7c:	88 b3       	in	r24, 0x18	; 24
  7e:	8c 7f       	andi	r24, 0xFC	; 252
  80:	88 bb       	out	0x18, r24	; 24
		break;
  82:	08 95       	ret
		case 4:
		PORTB &= ~(1<<PB2);
  84:	88 b3       	in	r24, 0x18	; 24
  86:	8b 7f       	andi	r24, 0xFB	; 251
  88:	88 bb       	out	0x18, r24	; 24
		break;
  8a:	08 95       	ret
		case 5:
		PORTB &= ~(1<<PB2) & ~(1<<PB0);
  8c:	88 b3       	in	r24, 0x18	; 24
  8e:	8a 7f       	andi	r24, 0xFA	; 250
  90:	88 bb       	out	0x18, r24	; 24
		break;
  92:	08 95       	ret
		case 6:
		PORTB &= ~(1<<PB2) & ~(1<<PB1);
  94:	88 b3       	in	r24, 0x18	; 24
  96:	89 7f       	andi	r24, 0xF9	; 249
  98:	88 bb       	out	0x18, r24	; 24
  9a:	08 95       	ret

0000009c <turn_off_leds>:
		break;
	}
};

void turn_off_leds() {
	PORTB |= (1<<PB0) | (1<<PB1) | (1<<PB2);
  9c:	88 b3       	in	r24, 0x18	; 24
  9e:	87 60       	ori	r24, 0x07	; 7
  a0:	88 bb       	out	0x18, r24	; 24
  a2:	08 95       	ret

000000a4 <main>:
void turn_off_leds();

int main(void) {
	// Initialization //
	// set pins connected to switch as input
	DDRA &= ~(1<<PA0) & ~(1<<PA1);
  a4:	8a b3       	in	r24, 0x1a	; 26
  a6:	8c 7f       	andi	r24, 0xFC	; 252
  a8:	8a bb       	out	0x1a, r24	; 26
	DDRA &= ~(1<<PA0);
	DDRA &= ~(1<<PA1);
	*/
	
	// enable internal pull up resistor
	PORTA |= (1<<PA0) | (1<<PA1);
  aa:	8b b3       	in	r24, 0x1b	; 27
  ac:	83 60       	ori	r24, 0x03	; 3
  ae:	8b bb       	out	0x1b, r24	; 27
	
	// set pins connected to LED as output
	DDRB |= (1<<PB0) | (1<<PB1) | (1<<PB2);
  b0:	87 b3       	in	r24, 0x17	; 23
  b2:	87 60       	ori	r24, 0x07	; 7
  b4:	87 bb       	out	0x17, r24	; 23
	
	
	turn_off_leds();
  b6:	f2 df       	rcall	.-28     	; 0x9c <turn_off_leds>
	
	int random_number;
	
	// Loop //
	while(1) {
		if(RESET_SWITCH == PRESSED) {
  b8:	c8 9b       	sbis	0x19, 0	; 25
			turn_off_leds();
  ba:	f0 df       	rcall	.-32     	; 0x9c <turn_off_leds>
		}
		if(ROLL_SWITCH == PRESSED) {
  bc:	c9 99       	sbic	0x19, 1	; 25
  be:	fc cf       	rjmp	.-8      	; 0xb8 <main+0x14>
			turn_off_leds();
  c0:	ed df       	rcall	.-38     	; 0x9c <turn_off_leds>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	2f e3       	ldi	r18, 0x3F	; 63
  c4:	8d e0       	ldi	r24, 0x0D	; 13
  c6:	93 e0       	ldi	r25, 0x03	; 3
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x24>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x2e>
  d2:	00 00       	nop
			// wait 1 second
			_delay_ms(1000);
			// Generate a new random number
			random_number = rand() % 6 + 1;
  d4:	77 d0       	rcall	.+238    	; 0x1c4 <rand>
  d6:	66 e0       	ldi	r22, 0x06	; 6
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	03 d0       	rcall	.+6      	; 0xe2 <__divmodhi4>
			// Turn ON the LEDs corresponding to the random number
			turn_on_leds_corresponding_to(random_number);
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	b5 df       	rcall	.-150    	; 0x4a <turn_on_leds_corresponding_to>
  e0:	eb cf       	rjmp	.-42     	; 0xb8 <main+0x14>

000000e2 <__divmodhi4>:
  e2:	97 fb       	bst	r25, 7
  e4:	07 2e       	mov	r0, r23
  e6:	16 f4       	brtc	.+4      	; 0xec <__divmodhi4+0xa>
  e8:	00 94       	com	r0
  ea:	06 d0       	rcall	.+12     	; 0xf8 <__divmodhi4_neg1>
  ec:	77 fd       	sbrc	r23, 7
  ee:	08 d0       	rcall	.+16     	; 0x100 <__divmodhi4_neg2>
  f0:	0b d0       	rcall	.+22     	; 0x108 <__udivmodhi4>
  f2:	07 fc       	sbrc	r0, 7
  f4:	05 d0       	rcall	.+10     	; 0x100 <__divmodhi4_neg2>
  f6:	3e f4       	brtc	.+14     	; 0x106 <__divmodhi4_exit>

000000f8 <__divmodhi4_neg1>:
  f8:	90 95       	com	r25
  fa:	81 95       	neg	r24
  fc:	9f 4f       	sbci	r25, 0xFF	; 255
  fe:	08 95       	ret

00000100 <__divmodhi4_neg2>:
 100:	70 95       	com	r23
 102:	61 95       	neg	r22
 104:	7f 4f       	sbci	r23, 0xFF	; 255

00000106 <__divmodhi4_exit>:
 106:	08 95       	ret

00000108 <__udivmodhi4>:
 108:	aa 1b       	sub	r26, r26
 10a:	bb 1b       	sub	r27, r27
 10c:	51 e1       	ldi	r21, 0x11	; 17
 10e:	07 c0       	rjmp	.+14     	; 0x11e <__udivmodhi4_ep>

00000110 <__udivmodhi4_loop>:
 110:	aa 1f       	adc	r26, r26
 112:	bb 1f       	adc	r27, r27
 114:	a6 17       	cp	r26, r22
 116:	b7 07       	cpc	r27, r23
 118:	10 f0       	brcs	.+4      	; 0x11e <__udivmodhi4_ep>
 11a:	a6 1b       	sub	r26, r22
 11c:	b7 0b       	sbc	r27, r23

0000011e <__udivmodhi4_ep>:
 11e:	88 1f       	adc	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	5a 95       	dec	r21
 124:	a9 f7       	brne	.-22     	; 0x110 <__udivmodhi4_loop>
 126:	80 95       	com	r24
 128:	90 95       	com	r25
 12a:	bc 01       	movw	r22, r24
 12c:	cd 01       	movw	r24, r26
 12e:	08 95       	ret

00000130 <do_rand>:
 130:	8f 92       	push	r8
 132:	9f 92       	push	r9
 134:	af 92       	push	r10
 136:	bf 92       	push	r11
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	ec 01       	movw	r28, r24
 146:	68 81       	ld	r22, Y
 148:	79 81       	ldd	r23, Y+1	; 0x01
 14a:	8a 81       	ldd	r24, Y+2	; 0x02
 14c:	9b 81       	ldd	r25, Y+3	; 0x03
 14e:	61 15       	cp	r22, r1
 150:	71 05       	cpc	r23, r1
 152:	81 05       	cpc	r24, r1
 154:	91 05       	cpc	r25, r1
 156:	21 f4       	brne	.+8      	; 0x160 <do_rand+0x30>
 158:	64 e2       	ldi	r22, 0x24	; 36
 15a:	79 ed       	ldi	r23, 0xD9	; 217
 15c:	8b e5       	ldi	r24, 0x5B	; 91
 15e:	97 e0       	ldi	r25, 0x07	; 7
 160:	2d e1       	ldi	r18, 0x1D	; 29
 162:	33 ef       	ldi	r19, 0xF3	; 243
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	55 d0       	rcall	.+170    	; 0x214 <__divmodsi4>
 16a:	49 01       	movw	r8, r18
 16c:	5a 01       	movw	r10, r20
 16e:	27 ea       	ldi	r18, 0xA7	; 167
 170:	31 e4       	ldi	r19, 0x41	; 65
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	35 d0       	rcall	.+106    	; 0x1e2 <__mulsi3>
 178:	6b 01       	movw	r12, r22
 17a:	7c 01       	movw	r14, r24
 17c:	2c ee       	ldi	r18, 0xEC	; 236
 17e:	34 ef       	ldi	r19, 0xF4	; 244
 180:	4f ef       	ldi	r20, 0xFF	; 255
 182:	5f ef       	ldi	r21, 0xFF	; 255
 184:	c5 01       	movw	r24, r10
 186:	b4 01       	movw	r22, r8
 188:	2c d0       	rcall	.+88     	; 0x1e2 <__mulsi3>
 18a:	dc 01       	movw	r26, r24
 18c:	cb 01       	movw	r24, r22
 18e:	8c 0d       	add	r24, r12
 190:	9d 1d       	adc	r25, r13
 192:	ae 1d       	adc	r26, r14
 194:	bf 1d       	adc	r27, r15
 196:	b7 ff       	sbrs	r27, 7
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <do_rand+0x70>
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	a1 09       	sbc	r26, r1
 19e:	b0 48       	sbci	r27, 0x80	; 128
 1a0:	88 83       	st	Y, r24
 1a2:	99 83       	std	Y+1, r25	; 0x01
 1a4:	aa 83       	std	Y+2, r26	; 0x02
 1a6:	bb 83       	std	Y+3, r27	; 0x03
 1a8:	9f 77       	andi	r25, 0x7F	; 127
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	df 90       	pop	r13
 1b4:	cf 90       	pop	r12
 1b6:	bf 90       	pop	r11
 1b8:	af 90       	pop	r10
 1ba:	9f 90       	pop	r9
 1bc:	8f 90       	pop	r8
 1be:	08 95       	ret

000001c0 <rand_r>:
 1c0:	b7 df       	rcall	.-146    	; 0x130 <do_rand>
 1c2:	08 95       	ret

000001c4 <rand>:
 1c4:	80 e6       	ldi	r24, 0x60	; 96
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	b3 df       	rcall	.-154    	; 0x130 <do_rand>
 1ca:	08 95       	ret

000001cc <srand>:
 1cc:	a0 e0       	ldi	r26, 0x00	; 0
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1d8:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1dc:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1e0:	08 95       	ret

000001e2 <__mulsi3>:
 1e2:	ee 27       	eor	r30, r30
 1e4:	ff 27       	eor	r31, r31

000001e6 <__mulsi3_helper>:
 1e6:	aa 27       	eor	r26, r26
 1e8:	bb 27       	eor	r27, r27
 1ea:	08 c0       	rjmp	.+16     	; 0x1fc <__mulsi3_helper+0x16>
 1ec:	a2 0f       	add	r26, r18
 1ee:	b3 1f       	adc	r27, r19
 1f0:	e4 1f       	adc	r30, r20
 1f2:	f5 1f       	adc	r31, r21
 1f4:	22 0f       	add	r18, r18
 1f6:	33 1f       	adc	r19, r19
 1f8:	44 1f       	adc	r20, r20
 1fa:	55 1f       	adc	r21, r21
 1fc:	96 95       	lsr	r25
 1fe:	87 95       	ror	r24
 200:	77 95       	ror	r23
 202:	67 95       	ror	r22
 204:	98 f3       	brcs	.-26     	; 0x1ec <__mulsi3_helper+0x6>
 206:	70 40       	sbci	r23, 0x00	; 0
 208:	a9 f7       	brne	.-22     	; 0x1f4 <__mulsi3_helper+0xe>
 20a:	00 97       	sbiw	r24, 0x00	; 0
 20c:	99 f7       	brne	.-26     	; 0x1f4 <__mulsi3_helper+0xe>
 20e:	bd 01       	movw	r22, r26
 210:	cf 01       	movw	r24, r30
 212:	08 95       	ret

00000214 <__divmodsi4>:
 214:	05 2e       	mov	r0, r21
 216:	97 fb       	bst	r25, 7
 218:	16 f4       	brtc	.+4      	; 0x21e <__divmodsi4+0xa>
 21a:	00 94       	com	r0
 21c:	0f d0       	rcall	.+30     	; 0x23c <__negsi2>
 21e:	57 fd       	sbrc	r21, 7
 220:	05 d0       	rcall	.+10     	; 0x22c <__divmodsi4_neg2>
 222:	14 d0       	rcall	.+40     	; 0x24c <__udivmodsi4>
 224:	07 fc       	sbrc	r0, 7
 226:	02 d0       	rcall	.+4      	; 0x22c <__divmodsi4_neg2>
 228:	46 f4       	brtc	.+16     	; 0x23a <__divmodsi4_exit>
 22a:	08 c0       	rjmp	.+16     	; 0x23c <__negsi2>

0000022c <__divmodsi4_neg2>:
 22c:	50 95       	com	r21
 22e:	40 95       	com	r20
 230:	30 95       	com	r19
 232:	21 95       	neg	r18
 234:	3f 4f       	sbci	r19, 0xFF	; 255
 236:	4f 4f       	sbci	r20, 0xFF	; 255
 238:	5f 4f       	sbci	r21, 0xFF	; 255

0000023a <__divmodsi4_exit>:
 23a:	08 95       	ret

0000023c <__negsi2>:
 23c:	90 95       	com	r25
 23e:	80 95       	com	r24
 240:	70 95       	com	r23
 242:	61 95       	neg	r22
 244:	7f 4f       	sbci	r23, 0xFF	; 255
 246:	8f 4f       	sbci	r24, 0xFF	; 255
 248:	9f 4f       	sbci	r25, 0xFF	; 255
 24a:	08 95       	ret

0000024c <__udivmodsi4>:
 24c:	a1 e2       	ldi	r26, 0x21	; 33
 24e:	1a 2e       	mov	r1, r26
 250:	aa 1b       	sub	r26, r26
 252:	bb 1b       	sub	r27, r27
 254:	fd 01       	movw	r30, r26
 256:	0d c0       	rjmp	.+26     	; 0x272 <__udivmodsi4_ep>

00000258 <__udivmodsi4_loop>:
 258:	aa 1f       	adc	r26, r26
 25a:	bb 1f       	adc	r27, r27
 25c:	ee 1f       	adc	r30, r30
 25e:	ff 1f       	adc	r31, r31
 260:	a2 17       	cp	r26, r18
 262:	b3 07       	cpc	r27, r19
 264:	e4 07       	cpc	r30, r20
 266:	f5 07       	cpc	r31, r21
 268:	20 f0       	brcs	.+8      	; 0x272 <__udivmodsi4_ep>
 26a:	a2 1b       	sub	r26, r18
 26c:	b3 0b       	sbc	r27, r19
 26e:	e4 0b       	sbc	r30, r20
 270:	f5 0b       	sbc	r31, r21

00000272 <__udivmodsi4_ep>:
 272:	66 1f       	adc	r22, r22
 274:	77 1f       	adc	r23, r23
 276:	88 1f       	adc	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	1a 94       	dec	r1
 27c:	69 f7       	brne	.-38     	; 0x258 <__udivmodsi4_loop>
 27e:	60 95       	com	r22
 280:	70 95       	com	r23
 282:	80 95       	com	r24
 284:	90 95       	com	r25
 286:	9b 01       	movw	r18, r22
 288:	ac 01       	movw	r20, r24
 28a:	bd 01       	movw	r22, r26
 28c:	cf 01       	movw	r24, r30
 28e:	08 95       	ret

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
